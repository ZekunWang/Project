/*
http://www.codeskulptor.org/#user39_18QaTQmZ3ZJramd.py
*/

# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
hit = True
aces = [0, 0]
bet = 0
money = 20
set_bet = False
wins = player_title = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}
MESSAGE = ('', '', 'Double Wins!', 'Triple Wins!', 'Quadra Wins!', 'Penta Wins!','You Are Ruling The Casino!',
           'You Are The God Of Blackjack!','OK...This Is Just A Mini Project...')

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    global aces
    def __init__(self, id):
        # create Hand object
        self.hand = []
        self.id = id
        self.aces = False

    def __str__(self):
        # return a string representation of a hand
        self.string = ''
        for card in self.hand:
            self.string += card.str()

    def add_card(self, card):
        # add a card object to a hand
        self.hand.append(card)
        if VALUES.get(card.get_rank()) == 1:
            self.aces = True
            if self.id:
                aces[1] = 1
            else:
                aces[0] = 1
            
    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        self.value = 0
        for card in self.hand:
            self.value += VALUES.get(card.get_rank())
        if self.aces and (self.value + 10) <= 21:
            self.value += 10
        # compute the value of the hand, see Blackjack video   
        return self.value
    
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        self.pos = list(pos)
        for card in self.hand:
            card.draw(canvas, self.pos)
            self.pos[0] += CARD_SIZE[0] + 10
        
# define deck class 
class Deck:
    def __init__(self):
        # create a Deck object
        self.deck = []

    def deal_card(self):
        # deal a card object from the deck
        self.deal = False
        while not self.deal:
            self.suit = random.choice(SUITS)
            self.rank = random.choice(RANKS)
            self.deal = True
            if self.deck != []:
                for used in self.deck:
                    if (self.suit, self.rank) == used:
                        self.deal = False
                        continue
        self.deck.append((self.suit, self.rank))
        card = Card(self.suit, self.rank)
        return card
        
#define event handlers for buttons
def deal():
    global outcome, in_play, deck, player, dealer, hit, set_bet, bet
    if not in_play:
        # your code goes here
        outcome = ''
        hit = True
        set_bet = False
        bet = 0
        deck = Deck()
        dealer = Hand(0)
        player = Hand(1)
        for i in range(2):
            player.add_card(deck.deal_card())
            dealer.add_card(deck.deal_card())
        in_play = True
    
def hit():
    # replace with your code below
    global score, in_play, outcome, wins
    # if the hand is in play, hit the player
    if in_play and set_bet:
    # if busted, assign a message to outcome, update in_play and score
        player.add_card(deck.deal_card())
        if player.get_value() > 21:
            outcome = 'You Lose!'
            score -= 1
            in_play = False
            wins = 0
                
def stand():
    # replace with your code below
    global in_play, hit, score, outcome, money, wins, player_title
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if in_play and set_bet:
        in_play = False
        hit = False
        while(dealer.get_value() < 17):
            dealer.add_card(deck.deal_card())        
        value = dealer.get_value()
        if value <= 21 and value > player.get_value():
            outcome = 'You Lose!'
            score -= 1
            wins = 0
        elif value <= 21 and value == player.get_value():
            outcome = 'Push!'
            money += bet
        else:            
            outcome = 'You Win!'
            score += 1
            money += 2 * bet
            if wins < 8:
                wins += 1
            if wins > player_title:
                player_title = wins
               
    # assign a message to outcome, update in_play and score

def bet5():
    global bet, money, set_bet
    if not set_bet:
        bet = 5	
        money -= bet
        set_bet = True

def bet10():
    global bet, money, set_bet
    if not set_bet:
        bet = 10	
        money -= bet
        set_bet = True

def bet20():
    global bet, money, set_bet
    if not set_bet:
        bet = 20	
        money -= bet
        set_bet = True

def bet100():
    global bet, money, set_bet
    if not set_bet:
        bet = 100	
        money -= bet
        set_bet = True
# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text('Blackjack', (40, 100), 52, 'Red')
    canvas.draw_text('Score '+str(score), (400, 100), 32, 'Black')
    canvas.draw_text('Dealer', (40, 200), 32, 'Black')    
    canvas.draw_text('Player', (40, 400), 32, 'Black')
    canvas.draw_text(outcome, (200, 200), 32, 'Black')
    if set_bet:
        dealer.draw(canvas, (100, 240))
        if hit:
            canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [100 + CARD_BACK_CENTER[0], 240 + CARD_BACK_CENTER[1]], CARD_BACK_SIZE)
        canvas.draw_text(str(player.get_value()), (140, 400), 32, 'Black')
        if in_play:
            canvas.draw_text('Hit or Stand?', (200, 400), 32, 'Black')
        else:
            canvas.draw_text('New deal?', (200, 400), 32, 'Black')
            canvas.draw_text(str(dealer.get_value()), (140, 200), 32, 'Black')
        player.draw(canvas, (100, 440))
    label.set_text('Your Money: ' + str(money) + '  Bet: ' + str(bet))
    message.set_text(MESSAGE[wins])
    titles.set_text(MESSAGE[player_title])

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green") 
 
#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
label = frame.add_label('Your Money: 20  Bet: 0', 200)
frame.add_button("Bet $5",  bet5, 100)
frame.add_button("Bet $10", bet10, 100)
frame.add_button("Bet $20", bet20, 100)
frame.add_button("Bet $100", bet100, 100)
frame.add_label('Current Title:')
message = frame.add_label('', 200)
frame.add_label('Best Title:')
titles = frame.add_label('', 300)
frame.set_draw_handler(draw)


# get things rolling 
deal()
frame.start()


# remember to review the gradic rubric
