/*
http://www.codeskulptor.org/#user39_SaGdEG3g8MQ5z1q.py
*/

# implementation of card game - Memory
import simplegui
import random

image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/gutenberg.jpg")

# Image dimensions
MAP_WIDTH = 1521
MAP_HEIGHT = 1818

# Scaling factor
SCALE = 3

# Canvas size
CAN_WIDTH = MAP_WIDTH // SCALE
CAN_HEIGHT = MAP_HEIGHT // SCALE
# Card size
SPACE_WIDTH = 3
SPACE_HEIGHT = 5
CARD_WIDTH = (CAN_WIDTH - 5 * SPACE_WIDTH) //4
CARD_HEIGHT = (CAN_HEIGHT - 5 * SPACE_HEIGHT) //4

CARD_POS = [[SPACE_WIDTH, SPACE_HEIGHT], [2*SPACE_WIDTH + CARD_WIDTH, SPACE_HEIGHT],
            [3*SPACE_WIDTH + 2*CARD_WIDTH, SPACE_HEIGHT], [4*SPACE_WIDTH + 3*CARD_WIDTH, SPACE_HEIGHT],
           [SPACE_WIDTH, 2*SPACE_HEIGHT + CARD_HEIGHT], [2*SPACE_WIDTH + CARD_WIDTH, 2*SPACE_HEIGHT + CARD_HEIGHT], 
            [3*SPACE_WIDTH + 2*CARD_WIDTH, 2*SPACE_HEIGHT + CARD_HEIGHT], [4*SPACE_WIDTH + 3*CARD_WIDTH, 2*SPACE_HEIGHT + CARD_HEIGHT],
           [SPACE_WIDTH, 3*SPACE_HEIGHT + 2*CARD_HEIGHT], [2*SPACE_WIDTH + CARD_WIDTH, 3*SPACE_HEIGHT + 2*CARD_HEIGHT], 
            [3*SPACE_WIDTH + 2*CARD_WIDTH, 3*SPACE_HEIGHT + 2*CARD_HEIGHT], [4*SPACE_WIDTH + 3*CARD_WIDTH, 3*SPACE_HEIGHT + 2*CARD_HEIGHT], 
            [SPACE_WIDTH, 4*SPACE_HEIGHT + 3*CARD_HEIGHT], [2*SPACE_WIDTH + CARD_WIDTH, 4*SPACE_HEIGHT + 3*CARD_HEIGHT], [3*SPACE_WIDTH + 2*CARD_WIDTH, 4*SPACE_HEIGHT + 3*CARD_HEIGHT], [4*SPACE_WIDTH + 3*CARD_WIDTH, 4*SPACE_HEIGHT + 3*CARD_HEIGHT]]

list = [1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8]
show = []
compare = [0, 0]

turns = 0
state = 0
# helper function to initialize globals
def new_game():
    global turns, list, show, state
    random.shuffle(list)
    show = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    turns = state = 0

      
# define event handlers
def mouseclick(pos):
    global state, turns, show, compare
    idx = 0
    # find the card player clicks on, and do nothing clicking on spaces between cards
    for point in CARD_POS:
        if pos[0] > point[0] and pos[0] < (point[0] + CARD_WIDTH) and pos[1] > point[1] and pos[1] < (point[1] + CARD_HEIGHT):
            idx = CARD_POS.index(point)
            # do nothing when clicks on shown cards
            if not show[idx]:
                if state == 0:
                    state = 1
                    show[idx] = 1
                    compare[0] = idx
                elif state == 1:
                    state = 2
                    turns += 1
                    show[idx] = 1
                    compare[1] = idx
                else:
                    state = 1
                    show[idx] = 1
                    if list[compare[0]] != list[compare[1]]:
                        show[compare[0]] = 0
                        show[compare[1]] = 0
                    compare[0] = idx
    
                        
# cards are logically 50x100 pixels in size    
def draw(canvas):    
    label.set_text('Turns = ' + str(turns))
    for point in CARD_POS:
        if show[CARD_POS.index(point)]:
            canvas.draw_text(str(list[CARD_POS.index(point)]), 
                             (point[0] + 2*CARD_WIDTH//7, point[1] + 2*CARD_HEIGHT//3), 90, 'White')            
        else:
            canvas.draw_image(image, 
            [SCALE*(point[0] + CARD_WIDTH//2), SCALE*(point[1] + CARD_HEIGHT//2)], 
                             [SCALE*CARD_WIDTH, SCALE*CARD_HEIGHT], 
            [point[0] + CARD_WIDTH//2, point[1] + CARD_HEIGHT//2], 
                             [CARD_WIDTH, CARD_HEIGHT])

# create frame and add a button and labels
frame = simplegui.create_frame("Memory", CAN_WIDTH, CAN_HEIGHT)
frame.add_button("Reset", new_game, 100)
label = frame.add_label("Turns = 0")

# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()


# Always remember to review the grading rubric
