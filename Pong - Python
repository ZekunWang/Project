//http://www.codeskulptor.org/#user39_BnuMRXi3oAxePi1_0.py

# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 620
HEIGHT = 400       
BALL_RADIUS = 15
PAD_WIDTH = 10
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
SPDP = 10
SPDB = 3
paddle1_pos = paddle2_pos = HEIGHT / 2
paddle1_vel = paddle2_vel = 0
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [SPDB, SPDB]
score1 = score2 = 0
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    if direction:
        ball_vel = [SPDB, -SPDB]
    else:
        ball_vel = [-SPDB, -SPDB]	
    timer.start()
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = score2 = 0
    if random.randrange(2):
        spawn_ball(RIGHT)
    else:
        spawn_ball(LEFT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]        
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 10, 'white', 'white')
    
    # update paddle's vertical position, keep paddle on the screen
    # left paddle
    if paddle1_pos == HALF_PAD_HEIGHT and paddle1_vel == -SPDP:
        paddle1_pos = HALF_PAD_HEIGHT
    elif paddle1_pos == (HEIGHT - HALF_PAD_HEIGHT) and paddle1_vel == SPDP:
        paddle1_pos = HEIGHT - HALF_PAD_HEIGHT
    else:
        paddle1_pos += paddle1_vel
    # right paddle
    if paddle2_pos == HALF_PAD_HEIGHT and paddle2_vel == -SPDP:
        paddle2_pos = HALF_PAD_HEIGHT
    elif paddle2_pos == (HEIGHT - HALF_PAD_HEIGHT) and paddle2_vel == SPDP:
        paddle2_pos = HEIGHT - HALF_PAD_HEIGHT
    else:
        paddle2_pos += paddle2_vel
    
    # draw paddles
    # left paddle
    canvas.draw_polygon([[0, paddle1_pos + HALF_PAD_HEIGHT], 
                         [PAD_WIDTH, paddle1_pos + HALF_PAD_HEIGHT],
                         [PAD_WIDTH, paddle1_pos - HALF_PAD_HEIGHT], 
                         [0, paddle1_pos - HALF_PAD_HEIGHT]], 1, 'white', 'white')
    canvas.draw_polygon([[WIDTH, paddle2_pos + HALF_PAD_HEIGHT], 
                         [WIDTH - PAD_WIDTH, paddle2_pos + HALF_PAD_HEIGHT],
                         [WIDTH - PAD_WIDTH, paddle2_pos - HALF_PAD_HEIGHT], 
                         [WIDTH, paddle2_pos - HALF_PAD_HEIGHT]], 1, 'white', 'white')

    # determine whether paddle and ball collide
    # ball reach left and right edge
    if ball_pos[0] <= (PAD_WIDTH + BALL_RADIUS) or ball_pos[0] >= (WIDTH - PAD_WIDTH - BALL_RADIUS):
        if ball_pos[0] < WIDTH / 2 and (ball_pos[1] < (paddle1_pos - HALF_PAD_HEIGHT) or ball_pos[1] > (paddle1_pos + HALF_PAD_HEIGHT)):
            score2 += 1
            spawn_ball(RIGHT)
        elif ball_pos[0] > WIDTH / 2 and (ball_pos[1] < (paddle2_pos - HALF_PAD_HEIGHT) or ball_pos[1] > (paddle2_pos + HALF_PAD_HEIGHT)):
            score1 += 1
            spawn_ball(LEFT)
        else:
            ball_vel[0] = -ball_vel[0]
    # ball reach top and bottom edge
    if ball_pos[1] <= BALL_RADIUS or ball_pos[1] >= (HEIGHT - BALL_RADIUS):
        ball_vel[1] = -ball_vel[1]
    # draw scores
    canvas.draw_text(str(score1), [WIDTH / 2 - 50, 40], 40, 'red')
    canvas.draw_text(str(score2), [WIDTH / 2 + 50, 40], 40, 'red')
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel += SPDP
    elif key == simplegui.KEY_MAP['w']:
        paddle1_vel -= SPDP
    elif key == simplegui.KEY_MAP['down']:
        paddle2_vel += SPDP
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel -= SPDP
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel -= SPDP
    elif key == simplegui.KEY_MAP['w']:
        paddle1_vel += SPDP
    elif key == simplegui.KEY_MAP['down']:
        paddle2_vel -= SPDP
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel += SPDP
    
def timer_handler():
    global ball_vel
    if abs(ball_vel[0]) != 12:
        if ball_vel[0] > 0:
            ball_vel[0] += 1
        if ball_vel[0] < 0:
            ball_vel[0] -= 1
    if abs(ball_vel[1]) != 6:
        if ball_vel[1] > 0:
            ball_vel[1] += 1
        if ball_vel[1] < 0:
            ball_vel[1] -= 1
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
timer = simplegui.create_timer(2500, timer_handler)
button1 = frame.add_button('Reset', new_game)

# start frame
new_game()
frame.start()
